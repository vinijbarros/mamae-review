rules_version = '2';

/**
 * FIRESTORE SECURITY RULES - Mamãe Review
 * 
 * COLEÇÕES E PERMISSÕES:
 * 
 * 1. users/{userId}
 *    - READ: Qualquer usuário autenticado (perfis públicos)
 *    - WRITE: Apenas o próprio usuário
 *    - VALIDAÇÕES: name (string), email (string), gestationWeek (number|null)
 * 
 * 2. products/{productId}
 *    - READ: Público (qualquer pessoa)
 *    - CREATE: Apenas usuários autenticados (createdBy = auth.uid)
 *    - UPDATE/DELETE: Apenas o criador
 *    - VALIDAÇÕES: Campos obrigatórios e tipos
 * 
 * 3. reviews/{reviewId}
 *    - READ: Público (qualquer pessoa)
 *    - CREATE: Usuários autenticados (1 review por produto)
 *    - UPDATE: Proibido (reviews são imutáveis)
 *    - DELETE: Apenas o autor
 *    - VALIDAÇÕES: rating (1-5), comment (min 10 chars)
 * 
 * BOAS PRÁTICAS:
 * - Sempre use serverTimestamp() no backend
 * - Validação de tipos e tamanhos
 * - Prevenção de duplicatas em reviews
 * - Fallback para negar acesso desconhecido
 */

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =====================================
    // FUNÇÕES AUXILIARES
    // =====================================
    
    // Verifica se o usuário está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Verifica se o usuário é o dono do documento
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Verifica se um campo existe e não está vazio
    function hasValidField(fieldName) {
      return request.resource.data[fieldName] != null 
          && request.resource.data[fieldName] != '';
    }
    
    // Verifica se o campo é uma string válida
    function isValidString(fieldName, minLength, maxLength) {
      return request.resource.data[fieldName] is string
          && request.resource.data[fieldName].size() >= minLength
          && request.resource.data[fieldName].size() <= maxLength;
    }
    
    // Verifica se o campo é um número válido
    function isValidNumber(fieldName, min, max) {
      return request.resource.data[fieldName] is number
          && request.resource.data[fieldName] >= min
          && request.resource.data[fieldName] <= max;
    }
    
    // =====================================
    // COLEÇÃO: _test (apenas para desenvolvimento)
    // =====================================
    match /_test/{document=**} {
      allow read, write: if true;
    }
    
    // =====================================
    // COLEÇÃO: users
    // =====================================
    match /users/{userId} {
      // LEITURA: Qualquer usuário autenticado pode ler perfis públicos
      allow read: if isAuthenticated();
      
      // CRIAÇÃO: Bloqueada (apenas via backend controlado no signup)
      allow create: if false;
      
      // ATUALIZAÇÃO: Apenas o próprio usuário pode editar seu perfil
      allow update: if isOwner(userId)
                    && onlyUpdatesAllowedFields()
                    && validUserData();
      
      // EXCLUSÃO: Bloqueada (usuários não podem deletar suas contas via Firestore)
      allow delete: if false;
      
      // Valida que apenas campos permitidos são atualizados
      function onlyUpdatesAllowedFields() {
        let allowedFields = ['name', 'email', 'gestationWeek'];
        return request.resource.data.diff(resource.data).affectedKeys()
               .hasOnly(allowedFields);
      }
      
      // Valida os dados do usuário
      function validUserData() {
        return (
          // Name: string de 2-100 caracteres
          (!('name' in request.resource.data) || 
           isValidString('name', 2, 100))
          &&
          // Email: string válida
          (!('email' in request.resource.data) || 
           request.resource.data.email is string)
          &&
          // GestationWeek: number 0-42 ou null
          (!('gestationWeek' in request.resource.data) || 
           request.resource.data.gestationWeek == null ||
           isValidNumber('gestationWeek', 0, 42))
        );
      }
    }
    
    // =====================================
    // COLEÇÃO: products
    // =====================================
    match /products/{productId} {
      // LEITURA: Público (qualquer pessoa pode ver produtos)
      allow read: if true;
      
      // CRIAÇÃO: Apenas usuários autenticados
      allow create: if isAuthenticated()
                    && request.resource.data.createdBy == request.auth.uid
                    && validProductData()
                    && hasRequiredProductFields();
      
      // ATUALIZAÇÃO: Apenas o criador do produto
      allow update: if isAuthenticated()
                    && resource.data.createdBy == request.auth.uid
                    && validProductData()
                    && createdByNotChanged();
      
      // EXCLUSÃO: Apenas o criador do produto
      allow delete: if isAuthenticated()
                    && resource.data.createdBy == request.auth.uid;
      
      // Verifica se todos os campos obrigatórios estão presentes
      function hasRequiredProductFields() {
        return hasValidField('name')
            && hasValidField('category')
            && hasValidField('storeName')
            && hasValidField('createdBy')
            && 'price' in request.resource.data
            && 'rating' in request.resource.data;
      }
      
      // Valida os dados do produto
      function validProductData() {
        return (
          // Name: string de 3-100 caracteres
          isValidString('name', 3, 100)
          &&
          // Category: string de 2-50 caracteres
          isValidString('category', 2, 50)
          &&
          // Description: string de 10-500 caracteres (se presente)
          (!('description' in request.resource.data) || 
           isValidString('description', 10, 500))
          &&
          // Price: number maior que 0
          request.resource.data.price is number &&
          request.resource.data.price >= 0
          &&
          // Rating: number entre 0 e 5
          request.resource.data.rating is number &&
          request.resource.data.rating >= 0 &&
          request.resource.data.rating <= 5
          &&
          // StoreName: string de 2-100 caracteres
          isValidString('storeName', 2, 100)
          &&
          // StoreLink: string válida ou vazia (se presente)
          (!('storeLink' in request.resource.data) || 
           request.resource.data.storeLink is string)
          &&
          // ImageUrl: string válida ou vazia (se presente)
          (!('imageUrl' in request.resource.data) || 
           request.resource.data.imageUrl is string)
          &&
          // CreatedBy: string (UID)
          request.resource.data.createdBy is string
          &&
          // CreatedAt: timestamp (se presente)
          (!('createdAt' in request.resource.data) || 
           request.resource.data.createdAt is timestamp)
        );
      }
      
      // Garante que o createdBy não seja alterado
      function createdByNotChanged() {
        return request.resource.data.createdBy == resource.data.createdBy;
      }
    }
    
    // =====================================
    // COLEÇÃO: reviews
    // =====================================
    match /reviews/{reviewId} {
      // LEITURA: Público (qualquer pessoa pode ver reviews)
      allow read: if true;
      
      // CRIAÇÃO: Apenas usuários autenticados
      allow create: if isAuthenticated()
                    && request.resource.data.authorId == request.auth.uid
                    && validReviewData()
                    && hasRequiredReviewFields()
                    && !userAlreadyReviewedProduct();
      
      // ATUALIZAÇÃO: Proibida (reviews são imutáveis)
      allow update: if false;
      
      // EXCLUSÃO: Apenas o autor da review
      allow delete: if isAuthenticated()
                    && resource.data.authorId == request.auth.uid;
      
      // Verifica se todos os campos obrigatórios estão presentes
      function hasRequiredReviewFields() {
        return hasValidField('productId')
            && hasValidField('authorId')
            && hasValidField('authorName')
            && hasValidField('comment')
            && 'rating' in request.resource.data;
      }
      
      // Valida os dados da review
      function validReviewData() {
        return (
          // ProductId: string válida
          request.resource.data.productId is string
          &&
          // Rating: number entre 1 e 5
          isValidNumber('rating', 1, 5)
          &&
          // Comment: string de 10-500 caracteres
          isValidString('comment', 10, 500)
          &&
          // AuthorId: string (UID)
          request.resource.data.authorId is string
          &&
          // AuthorName: string de 2-100 caracteres
          isValidString('authorName', 2, 100)
          &&
          // CreatedAt: timestamp (se presente)
          (!('createdAt' in request.resource.data) || 
           request.resource.data.createdAt is timestamp)
        );
      }
      
      // Verifica se o usuário já avaliou este produto
      // Nota: Esta validação é limitada no Firestore Rules
      // Recomenda-se validação adicional no backend
      function userAlreadyReviewedProduct() {
        // Esta função retorna false para permitir a criação
        // A validação real de duplicatas deve ser feita no backend
        // pois o Firestore Rules não pode fazer queries complexas
        return false;
      }
    }
    
    // =====================================
    // FALLBACK: Negar acesso a tudo que não foi especificado
    // =====================================
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
